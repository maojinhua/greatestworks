# =============================================================================
# GreatestWorks MMO 游戏服务器 - 优化版 Docker Compose
# =============================================================================
version: '3.8'

# 全局配置
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-restart-policy: &restart-policy
  restart: unless-stopped

services:
  # =============================================================================
  # MMO 游戏服务器 - 主应用
  # =============================================================================
  mmo-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-final}
      args:
        BUILD_VERSION: ${BUILD_VERSION:-dev}
        BUILD_TIME: ${BUILD_TIME}
        GIT_COMMIT: ${GIT_COMMIT}
    image: greatestworks/mmo-server:${IMAGE_TAG:-latest}
    container_name: mmo-server
    ports:
      - "${SERVER_HTTP_PORT:-8080}:8080"
      - "${SERVER_WS_PORT:-8081}:8081"
      - "${SERVER_METRICS_PORT:-9090}:9090"
    environment:
      # 应用配置
      - APP_ENV=${APP_ENV:-production}
      - GIN_MODE=${GIN_MODE:-release}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      
      # 数据库配置
      - MONGODB_URI=mongodb://${MONGODB_USER:-admin}:${MONGODB_PASSWORD:-admin123}@mongodb:27017/${MONGODB_DATABASE:-mmo_game}?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      
      # 消息队列配置
      - NATS_URL=nats://nats:4222
      - NATS_CLUSTER_ID=${NATS_CLUSTER_ID:-mmo-cluster}
      
      # 安全配置
      - JWT_SECRET=${JWT_SECRET:-change-me-in-production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-32-char-encryption-key-change-me}
      
      # 性能配置
      - MAX_CONNECTIONS=${MAX_CONNECTIONS:-10000}
      - WORKER_POOL_SIZE=${WORKER_POOL_SIZE:-100}
      - CACHE_TTL=${CACHE_TTL:-3600}
    env_file:
      - .env
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./logs:/var/log/mmo-server:rw
      - ./configs:/configs:ro
      - /etc/localtime:/etc/localtime:ro
    <<: *restart-policy
    logging: *default-logging
    networks:
      - mmo-network
    deploy:
      resources:
        limits:
          cpus: '${SERVER_CPU_LIMIT:-2.0}'
          memory: ${SERVER_MEMORY_LIMIT:-2G}
        reservations:
          cpus: '${SERVER_CPU_RESERVATION:-0.5}'
          memory: ${SERVER_MEMORY_RESERVATION:-512M}
    healthcheck:
      test: [
        "CMD-SHELL",
        "wget --no-verbose --tries=1 --spider --timeout=5 http://localhost:8080/health || exit 1"
      ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # MongoDB数据库
  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=mmo_game
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    restart: unless-stopped
    networks:
      - mmo-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/mmo_game --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # NATS消息系统
  nats:
    image: nats:2.10-alpine
    ports:
      - "4222:4222"
      - "8222:8222"  # HTTP监控端口
      - "6222:6222"  # 集群端口
    command: [
      "--http_port", "8222",
      "--port", "4222",
      "--server_name", "nats-mmo-01",
      # "--cluster_name", "mmo-cluster",
      # "--cluster", "nats://0.0.0.0:6222",
      # "--routes", "nats-route://nats:6222",
      # "--routes","nats://nats:6222" , # 关键：指向自己形成单节点集群
      "--jetstream",
      "--store_dir", "/data"
    ]
    volumes:
      - nats_data:/data
    restart: unless-stopped
    networks:
      - mmo-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis缓存
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - mmo-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Nginx反向代理（可选）
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - mmo-server
    restart: unless-stopped
    networks:
      - mmo-network
    profiles:
      - production

  # MongoDB管理界面（开发环境）
  mongo-express:
    image: mongo-express:1.0.0
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin123
      - ME_CONFIG_MONGODB_URL=mongodb://admin:admin123@mongodb:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    depends_on:
      - mongodb
    restart: unless-stopped
    networks:
      - mmo-network
    profiles:
      - development

  # Redis管理界面（开发环境）
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis123
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin123
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - mmo-network
    profiles:
      - development

  # Prometheus监控（生产环境）
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - mmo-network
    profiles:
      - monitoring

  # Grafana仪表板（生产环境）
  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - mmo-network
    profiles:
      - monitoring

volumes:
  mongodb_data:
    driver: local
  nats_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mmo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16